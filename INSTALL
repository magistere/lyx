Compiling and installing LyX with autotools
===========================================

This document is about compiling LyX with the autotools suite. If you
want to compile using using CMake (in particular on windows), please
refer to the INSTALL.cmake file.


Quick compilation guide
-----------------------

These four steps will compile, test and install LyX:

	0) Linux users beware: You need qt5 and qt5-devel packages
	   of the same version to compile LyX.

	   In general, it is also recommended to have pkg-config
	   installed (the name might vary depending on your
	   distribution).

	1) ./configure configures LyX according to your system. You
	   may have to set --with-qt-dir=<path-to-your-qt-installation>
	   (for example, "--with-qt-dir=/usr/share/qt5/") if the
	   environment variable QTDIR is not set and pkg-config is not
	   available.

	   See Note below if ./configure script is not present.

	2) make
	   compiles the program.

	3) src/lyx
	   runs the program so you can check it out.

	4) make install
	   will install it. You can use "make install-strip" instead
           if you want a smaller binary.


Note for Git checkouts
-----------------------------

If you have checked this out from Git, you need to have:
* automake (supported versions are 1.14--1.16)
* autoconf (supported versions are 2.65--2.69)
Then type "./autogen.sh" to build the needed configuration
files and proceed as stated above/below.

You will also probably need GNU m4 (perhaps installed as gm4).


Requirements
------------

First of all, you will need a C++11 standard conforming compiler, like gcc (at
least 4.9) or clang.

LyX makes great use of the C++ Standard Template Library (STL).
This means that gcc users will have to install the relevant libstdc++
library to be able to compile this version of LyX.

For full LyX usability we suggest to use Qt 5.6 and higher, or at the
very least Qt 5.4. For compilation you need to compile against at least
Qt 4.8 which has been widely tested, and for Windows we advise at least
Qt 4.8.4. The only special point to make is that you must ensure that
both LyX and the Qt libraries are compiled with the same C++ compiler.

To build LyX with spell checking capabilities included you have to
install at least one of the development packages of the spell checker
libraries. See the RELEASE-NOTES for details.

Users of debian-based distributions are well advised to run
'apt-get build-dep lyx' before compiling to install proper dependencies.


* Other things to note

If you make modifications to the source that affect any of the
translations or you change the translation files themselves (po/*.po)
files, you will need to have the GNU gettext package installed to
compile LyX with up-to-date translations (at least gettext version
0.16.1 is needed). You can get the latest version from:
	ftp://ftp.gnu.org/gnu/gettext/

The two following programs should be available at configuration time:

  o Python (2.7 or 3.5 and newer) must be installed. Python is used for many
    simple tasks that are executed by external scripts, such as the automatic
    configuration step and the import of older LyX documents with the lyx2lyx
    script (this script is called automatically when opening a file).


Creating the Makefile
---------------------

LyX can be configured using GNU autoconf utility which attempts to guess
the configuration needed to suit your system.  The standard way to use it
is described in the file INSTALL.autoconf.  In most cases you will be able
to create the Makefile by typing

  ./configure

For more complicated cases, LyX configure honors the following specific
flags:

  o --enable-build-type=[rel(ease), pre(release), dev(elopment), prof(iling), gprof]
    allows to tweak the compiled code. The following table describes
    the settings in terms of various options that are described later

                      release   prerelease  development profiling gprof
    optimization        -O2         -O2         -O         -O2     -O2
    assertions                       X           X
    stdlib-debug                                 X
    warnings                         X           X
    debug                            X           X           X       X
    maintainer-mode                              X

    The defaults are as follows in terms of version number
    release: stable release (2.x.y)
    prerelease: version number contains `alpha', `beta', `rc' or `pre'.
    development: version number contains `dev'.

    The `profiling' build type uses the -fno-omit-frame-pointer option with gcc

    The `gprof' build type compiles and links with -pg option with gcc.

  o --disable-qt5 that forces configuration with Qt 4.x when Qt 5.x is
    also available. By default Qt5 is tried first, and then Qt4.

  o --with-extra-lib=DIRECTORY that specifies the path where LyX will
    find extra libraries (like Qt) it needs. Defaults to NONE
    (i.e. search in standard places). You can specify several
    directories, separated by colons.

  o --with-extra-inc=DIRECTORY that gives the place where LyX will find
    extra headers.  Defaults to NONE (i.e.  search in standard places).
    You can specify several directories, separated by colons.

  o --with-extra-prefix[=DIRECTORY] that is equivalent to
       --with-extra-lib=DIRECTORY/lib --with-extra-inc=DIRECTORY/include
    If DIRECTORY is not specified, the current prefix is used.

  o --with-version-suffix[=SUFFIX] will install LyX as lyxSUFFIX. The
    LyX data directory will be something like <whatever>/lyxSUFFIX/.
    Additionally your user configuration files will be found in e.g.
    $HOME/.lyxSUFFIX. The default for SUFFIX is "-<currentversion>",
    e.g. lyx-1.6.1.

    You can use this feature to install more than one version of LyX
    on the same system. You can optionally specify a "version" of your
    own, by doing something like :
       ./configure --with-version-suffix=-latestdev

    Note that the standard configure options --program-prefix,
    --program-suffix and the others will not affect the shared LyX
    directory etc. so it is recommended that you use --with-version-suffix
    (or --prefix) instead.

There are also flags to control the internationalization support in
LyX:

  o --disable-nls suppresses all internationalization support,
    yielding somewhat smaller code.

  o You can also set the environment variable LINGUAS to a list of
    languages in case you do not want to install all the translation
    files. For example, if you are only interested in German and
    Finnish, you can type (with sh or bash)
        export LINGUAS='de fi'
    before running configure.

Moreover, the following generic configure flags may be useful:

  o --prefix=DIRECTORY specifies the root directory to use for
    installation. [defaults to /usr/local]

  o --datadir=DIRECTORY gives the directory where all extra LyX
    files (documentation, templates and layout definitions)
    will be installed.
    [defaults to ${prefix}/share/lyx${program_suffix}]

  o --bindir=DIRECTORY gives the directory where the lyx binary
    will be installed. [defaults to ${prefix}/bin]

  o --mandir=DIRECTORY gives the directory where the man pages will go.
    [defaults to ${prefix}/man]

  o --enable-maintainer-mode enables some code that automatically
    rebuilds the configure script, makefiles templates and other useful
    files when needed. This is off by default on releases, to avoid
    surprises.

Note that the --with-extra-* commands are not really robust when it
comes to using relative paths.  If you really want to use a relative path
here, you can prepend it with "`pwd`/".

If you do not like the default compile flags used (-g -O2 on gcc), you can
set CXXFLAGS variable to other values as follows:

  o CXXFLAGS='-O2' (sh, bash)
  o setenv CXXFLAGS '-O2' (csh, tcsh)

Similarly, if you want to force the use of a specific compiler, you can
give a value to the CXX variable.

The following options allow you to tweak the generated code more
precisely (see the description of --enable-build-type for the default
values):

  o --enable-cxx-mode=VALUE can be used to select a C++ standard, for
    example --enable-cxx-mode=11. The default is to try C++14, and then
    C++11.

  o --enable-optimization=VALUE enables you to set optimization to a
    higher level than the default, for example --enable-optimization=-O3.

  o --disable-optimization - you can use this to disable compiler
    optimization of LyX. The compile may be much quicker with some
    compilers, but LyX will run more slowly.

  o --enable-debug will add debug information to your binary. This
    requires a lot more disk space, but is a must if you want to try
    to debug problems in LyX. There is no run-time penalty.

  o --enable-warnings that make the compiler output more warnings during
    the compilation of LyX.  Opposite is --disable-warnings.

  o --enable-assertions that make the compiler generate run-time
    code which checks that some variables have sane values. Opposite
    is --disable-assertions.

  o --enable-stdlib-debug adds some debug code in the standard
    library; this slows down the code, but has been helpful in the
    past to find bugs. Note that this is in general incompatible with
    the system hunspell library (as of version 1.5). You may have to use
    --disable-stdlib-debug when linking development versions against
    your system's hunspell library.



Compiling and installing LyX
----------------------------

Once you've got the Makefile created, you just have to type:

  make all
  make install

All should be OK ;)

Since the binaries with debug information tend to be huge (although
this does not affect the run-time memory footprint), you might want
to strip the lyx binary. In this case replace "make install" with

  make install-strip

BTW: in the lib/images subdirectory there is also small icons
`lyx.png' and `lyx.svg', that can be used to display LyX documents in
filemanagers.

If configure fails for some strange reason
------------------------------------------

Even when configure fails, it creates a Makefile.  You can always check
the contents of this file, modify it and run 'make'.

Compiling For Multiple Architectures
------------------------------------

You can compile LyX for more than one kind of computer at the same
time, by placing the object files for each architecture in their own
directory.  To do this, you must use a version of `make' that supports
the `VPATH' variable, such as GNU `make'.  `cd' to the directory where
you want the object files and executables to go and run the
`configure' script.  `configure' automatically checks for the source
code in the directory that `configure' is in and in `..'.

If you have to use a `make' that does not support the `VPATH'
variable, you have to compile LyX for one architecture at a time in
the source code directory.  After you have installed LyX for one
architecture, use `make distclean' before reconfiguring for another
architecture.

